# -*- coding: utf-8 -*-
"""Hackaton_final.ipynb
Automatically generated by Colab.
Original file is located at
    https://colab.research.google.com/drive/1CftPKcOEcsrutT3bKwx3Mq6DgNTANpAZ
# Hackathon Sujet 2 : Analyse Des Coûts De L'assurance Médicale
Description :
Dans ce hackathon, vous êtes chargé d'analyser les coûts de l'assurance médicale en fonction de divers facteurs tels que l'âge, le sexe, l'IMC, le nombre de personnes à charge, les habitudes du tabagisme et la région résidentielle. En tant qu'analyste de données travaillant dans le secteur de l'assurance maladie, votre objectif est d'explorer les « ensembles de données personnelles sur les coûts médicaux » pour découvrir des modèles et des idées qui pourraient éclairer les stratégies de tarification, l'évaluation des risques et la planification personnalisée des soins de santé.
Cet ensemble de données vous permet d'étudier les relations entre les facteurs démographiques et de mode de vie et les dépenses médicales, offrant des informations précieuses sur les principaux facteurs des coûts d'assurance.
## Analyse exploratoire des données (EDA) :
### Effectuer une analyse complète de l'ensemble de données pour comprendre la répartition des variables et identifier toute corrélation entre des caractéristiques telles que l'âge, l'IMC, le statut de tabagisme et les frais médicaux (charges).
### Utilisez des statistiques et des visualisations descriptives pour résumer les données et mettre en évidence les tendances ou les valeurs aberrantes intéressantes.
"""
!wget 'https://github.com/devtlv/Datasets-DA-Bootcamp-2-/raw/refs/heads/main/Week%208%20-%20Hackathon%20&%20AB%20Testing/W8D1%20-%20Hackathon/Medical%20Cost%20Personal%20Datasets.zip'
# Renommage du zip, décompression et déplacement du csv à la racine
!mv 'Medical Cost Personal Datasets.zip' Medical_Cost_Personal_Datasets.zip
!unzip Medical_Cost_Personal_Datasets.zip
!mv 'Medical Cost Personal Datasets/Medical Cost Personal Datasets/insurance.csv' .
import pandas as pd
df = pd.read_csv('insurance.csv')
df2 = df.copy()
df.info()
df.describe()
df.shape
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# Boxplot: Frais selon le statut de fumeur
plt.figure()
sns.boxplot(x="smoker", y="charges", data=df, hue="smoker", palette={"yes": "red", "no": "green"})
plt.title("Frais selon le statut de fumeur")
plt.xlabel("Fumeur")
plt.ylabel("Frais")
plt.tight_layout()
plt.show()
#Age vs Frais
plt.figure()
sns.lineplot(x="age", y="charges", data=df)
plt.title("Frais selon l'âge")
plt.xlabel("Âge")
plt.ylabel("Frais")
plt.show()
# IMC vs Frais
plt.figure()
sns.scatterplot(data=df, x="bmi", y="charges", hue="smoker", palette={"yes": "red", "no": "green"})
plt.title("IMC vs Frais selon le statut de fumeur")
plt.xlabel("IMC")
plt.ylabel("Frais")
plt.show()
# Sexe
plt.figure()
sns.violinplot(x="sex", y="charges", data=df, hue="sex", palette={"female": "pink", "male": "blue"})
plt.title("Charges selon le sexe")
plt.xlabel("Genre")
plt.ylabel("Frais")
plt.show()
# Région
plt.figure()
sns.barplot(x="region", y="charges", data=df, estimator='mean',palette='pastel')
plt.title("Charges moyennes par région")
plt.xlabel("Région")
plt.ylabel("Frais")
plt.show()
"""## Prétraitement des données :
### Gérer les données manquantes et effectuer tout nettoyage de données nécessaire.
"""
# Comptage des valeurs nulles
if df.isnull().sum().sum() > 0:
  print("Il y a des valeurs nulles dans le dataset : procéder au nettoyage si nécessaire")
  df.dropna(inplace=True)
  print("Nettoyage effectué")
else:
  print("Il n'y a pas de valeurs nulles dans le dataset")
"""Aucune valeur nulle dans le dataset => Pas besoin de nettoyage
### Appliquez la normalisation ou la standardisation aux caractéristiques numériques telles que l'âge, l'imc et les frais pour les préparer à l'analyse.
"""
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
# Selection des colonnes numériques
numerical_cols = ['age', 'bmi', 'charges']
# Normalisation en utilisant MinMaxScaler
scaler = MinMaxScaler()
df_normalized = df.copy()
df_normalized[numerical_cols] = scaler.fit_transform(df[numerical_cols])
# Affichage des colonnes avant / après normalisation
print("Original (5 premières lignes):")
print(df[numerical_cols].head())
print("\nNormalized (5 premières lignes):")
print(df_normalized[numerical_cols].head())
"""### Encoder des variables catégorielles telles que le sexe, le fumeur et la région pour faciliter une analyse plus approfondie"""
from sklearn.preprocessing import LabelEncoder
# Label Encoding pour le sexe et la colonne "smoker"
label_encoder = LabelEncoder()
df['sex'] = label_encoder.fit_transform(df['sex'])       # female=0, male=1
df['smoker'] = label_encoder.fit_transform(df['smoker']) # no=0, yes=1
df['region'] = label_encoder.fit_transform(df['region']) # 0=northeast, 1=northwest, 2=southeast, 3=southwest
# Affichage du résultat
df
"""## Exploration des caractéristiques :
### Explorez l'impact des différentes caractéristiques sur les coûts médicaux, en vous concentrant sur des variables clés telles que l'IMC, le statut de tabagisme et le nombre de personnes à charge.
"""
# --- Correlation Matrix ---
correlation_matrix = df.corr(numeric_only=True)
print(correlation_matrix)
# Matrice de correlation
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Features')
plt.tight_layout()
plt.show()